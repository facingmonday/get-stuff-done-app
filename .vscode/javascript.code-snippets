{
	"DataGrid Component": {
    "prefix": "mc_datagrid_component",
    "body": [
      "import React, { useEffect } from 'react';",
      "import PropTypes from 'prop-types';",
      "import Grid from '@material-ui/core/Grid';",
      "import { Typography, DataGrid } from 'mc-ui';",
      "",
      "const ${1:PascalCase}s = ({ supplierId, ${2:camelCase}s, ${2:camelCase}Types, fetch${1:PascalCase}s, delete${1:PascalCase}, history }) => {",
      "  const handleAddEdit = id => {",
      "    history.push(`/suppliers/${supplierId}/${2:camelCase}s/${id || 'create'}`);",
      "  };",
      "",
      "  const handleFilter = options => fetch${1:PascalCase}s(options);",
      "",
      "  const handleDelete = id => delete${1:PascalCase}(id);",
      "",
      "  useEffect(() => {",
      "    fetch${1:PascalCase}s();",
      "  }, []);",
      "",
      "  return (",
      "    <Grid container>",
      "      <Grid item xs={12}>",
      "        <DataGrid",
      "          {...${2:camelCase}s}",
      "          confirmOnDelete",
      "          columns={[",
      "            {",
      "              label: 'First Name',",
      "              field: 'firstName',",
      "              justifyContent: 'flex-start',",
      "              flex: 1,",
      "              filterOptions: {",
      "                type: 'boolean',",
      "              },",
      "            },",
      "            {",
      "              label: 'Last Name',",
      "              field: 'lastName',",
      "              justifyContent: 'flex-start',",
      "              flex: 1,",
      "              filterOptions: {",
      "                type: 'boolean',",
      "              },",
      "            },",
      "            {",
      "              label: 'Email',",
      "              field: 'email',",
      "              justifyContent: 'flex-start',",
      "              props: {",
      "                xs: 1,",
      "              },",
      "              filterOptions: {",
      "                type: 'boolean',",
      "              },",
      "            },",
      "            {",
      "              label: 'Type',",
      "              field: '${2:camelCase}TypeId',",
      "              justifyContent: 'flex-start',",
      "              props: {",
      "                xs: 2,",
      "              },",
      "              component: ({ value }) => {",
      "                const ${2:camelCase}Type =",
      "                  ${2:camelCase}Types.results && ${2:camelCase}Types.results.length",
      "                    ? ${2:camelCase}Types.results.find(ct => ct.${2:camelCase}TypeId === value)",
      "                    : false;",
      "                if (${2:camelCase}Type) {",
      "                  return (",
      "                    <Typography variant=\"p1\" styles={{ color: '#70717e' }}>",
      "                      {${2:camelCase}Type.${2:camelCase}Type1}",
      "                    </Typography>",
      "                  );",
      "                }",
      "                return (",
      "                  <Typography variant=\"p1\" styles={{ color: '#70717e' }}>",
      "                    {value}",
      "                  </Typography>",
      "                );",
      "              },",
      "            },",
      "          ]}",
      "          showEdit",
      "          showDelete",
      "          showFilterRow={false}",
      "          idField=\"${2:camelCase}Id\"",
      "          title=\"${1:PascalCase}s\"",
      "          data={${2:camelCase}s.results}",
      "          onCreate={() => handleAddEdit()}",
      "          onAdd={() => handleAddEdit()}",
      "          onEdit={id => handleAddEdit(id)}",
      "          onDelete={id => handleDelete(id)}",
      "          onSearch={searchTerm => handleFilter({ searchTerm })}",
      "          onFilter={filter => handleFilter({ filter })}",
      "          onChangePage={val => handleFilter(val)}",
      "          onChangeLimit={val => handleFilter(val)}",
      "          onSort={val => handleFilter({ sort: [val] })}",
      "          onRowClick={id => handleAddEdit(id)}",
      "        />",
      "      </Grid>",
      "    </Grid>",
      "  );",
      "};",
      "",
      "${1:PascalCase}s.propTypes = {",
      "  ${2:camelCase}s: PropTypes.object,",
      "  fetch${1:PascalCase}s: PropTypes.func,",
      "  delete${1:PascalCase}: PropTypes.func,",
      "  history: PropTypes.object,",
      "};",
      "export default ${1:PascalCase}s;",
      ""
    ],
    "description": "DataGrid Component"
  },
	"Constants CRUD": {
    "prefix": "mc_constants_crud",
    "body": [
      "export const FETCH_${1:UPPERCASE}S = 'FETCH_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE}S_LOADING = 'FETCH_${1:UPPERCASE}S_LOADING';",
      "export const FETCH_${1:UPPERCASE}S_SUCCESS = 'FETCH_${1:UPPERCASE}S_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}S_FAILURE = 'FETCH_${1:UPPERCASE}S_FAILURE';",
      "export const RESET_${1:UPPERCASE}S = 'RESET_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE} = 'FETCH_${1:UPPERCASE}';",
      "export const FETCH_${1:UPPERCASE}_LOADING = 'FETCH_${1:UPPERCASE}_LOADING';",
      "export const FETCH_${1:UPPERCASE}_SUCCESS = 'FETCH_${1:UPPERCASE}_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}_FAILURE = 'FETCH_${1:UPPERCASE}_FAILURE';",
      "export const SAVE_${1:UPPERCASE} = 'SAVE_${1:UPPERCASE}';",
      "export const SAVE_${1:UPPERCASE}_SUCCESS = 'SAVE_${1:UPPERCASE}_SUCCESS';",
      "export const SAVE_${1:UPPERCASE}_FAILURE = 'SAVE_${1:UPPERCASE}_FAILURE';",
      "export const UPDATE_ACTIVE_${1:UPPERCASE} = 'UPDATE_ACTIVE_${1:UPPERCASE}';",
      "export const RESET_ACTIVE_${1:UPPERCASE} = 'RESET_ACTIVE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE} = 'DELETE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE}_SUCCESS = 'DELETE_${1:UPPERCASE}_SUCCESS';",
      "export const DELETE_${1:UPPERCASE}_FAILURE = 'DELETE_${1:UPPERCASE}_FAILURE';",
      "export const RESET_DELETED_${1:UPPERCASE} = 'RESET_DELETED_${1:UPPERCASE}';",
      ""
    ],
    "description": "Constants CRUD"
  },
	"Action": {
    "prefix": "mc_action",
    "body": [
      "import {",
      "  ${1:UPPERCASE},",
      "  ${1:UPPERCASE}_SUCCESS,",
      "  ${1:UPPERCASE}_FAILURE,",
      "} from '../constants/${3:camelCase}';",
      "",
      "export function fetch${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: ${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: ${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(errors) {",
      "  return {",
      "    type: ${1:UPPERCASE}_FAILURE,",
      "    errors,",
      "  };",
      "}",
      ""
    ],
    "description": "Action"
  },
	"Action CRUD": {
    "prefix": "mc_action_crud",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "  FETCH_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE}S_SUCCESS,",
      "  FETCH_${1:UPPERCASE}S_FAILURE,",
      "  SAVE_${1:UPPERCASE},",
      "  SAVE_${1:UPPERCASE}_SUCCESS,",
      "  SAVE_${1:UPPERCASE}_FAILURE,",
      "  UPDATE_ACTIVE_${1:UPPERCASE},",
      "  RESET_ACTIVE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE}_SUCCESS,",
      "  DELETE_${1:UPPERCASE}_FAILURE,",
      "} from '../constants/${3:camelCase}';",
      "",
      "export function fetch${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(errors) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_FAILURE,",
      "    errors,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}s(options) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S,",
      "    options,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sSuccess(response) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S_SUCCESS,",
      "    response,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sFailure(errors) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S_FAILURE,",
      "    errors,",
      "  };",
      "}",
      "export function save${2:PascalCase}(${3:camelCase}) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE},",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function save${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function save${2:PascalCase}Failure(errors) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE}_FAILURE,",
      "    errors,",
      "  };",
      "}",
      "export function updateActive${2:PascalCase}(${3:camelCase}) {",
      "  return {",
      "    type: UPDATE_ACTIVE_${1:UPPERCASE},",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function resetActive${2:PascalCase}(data) {",
      "  return {",
      "    type: RESET_ACTIVE_${1:UPPERCASE},",
      "    data,",
      "  };",
      "}",
      "export function delete${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function delete${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function delete${2:PascalCase}Failure(errors) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE}_FAILURE,",
      "    errors,",
      "  };",
      "}",
      ""
    ],
    "description": "Action CRUD"
  },
	"Saga CRUD": {
    "prefix": "mc_saga_crud",
    "body": [
      "import { all, call, put, takeLatest } from 'redux-saga/effects';",
      "import { FETCH_${1:UPPERCASE}S, FETCH_${1:UPPERCASE}, SAVE_${1:UPPERCASE}, DELETE_${1:UPPERCASE} } from '../constants/${2:camelCase}';",
      "import {",
      "  fetch${3:PascalCase}sSuccess,",
      "  fetch${3:PascalCase}sFailure,",
      "  fetch${3:PascalCase}Success,",
      "  fetch${3:PascalCase}Failure,",
      "  save${3:PascalCase}Success,",
      "  save${3:PascalCase}Failure,",
      "  delete${3:PascalCase}Success,",
      "  delete${3:PascalCase}Failure,",
      "} from '../actions/${2:camelCase}';",
      "import {",
      "  fetch${3:PascalCase}s as fetch${3:PascalCase}sApi,",
      "  fetch${3:PascalCase} as fetch${3:PascalCase}Api,",
      "  create${3:PascalCase} as create${3:PascalCase}Api,",
      "  update${3:PascalCase} as update${3:PascalCase}Api,",
      "  delete${3:PascalCase} as delete${3:PascalCase}Api,",
      "} from '../apis/${2:camelCase}';",
      "",
      "export function* fetch${3:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}S, performFetch${3:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${3:PascalCase}sAction(action) {",
      "  try {",
      "    const { data, errors} = yield call(fetch${3:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}sFailure(e));",
      "  }",
      "}",
      "export function* fetch${3:PascalCase}Saga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}, performFetch${3:PascalCase}Action);",
      "}",
      "function* performFetch${3:PascalCase}Action(action) {",
      "  try {",
      "    const { data, errors} = yield call(fetch${3:PascalCase}Api, action.${2:camelCase}Id);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "",
      "export function* save${3:PascalCase}Saga() {",
      "  yield takeLatest(SAVE_${1:UPPERCASE}, performSave${3:PascalCase}Action);",
      "}",
      "function* performSave${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = action.${2:camelCase}.id ? yield call(update${3:PascalCase}Api, action.${2:camelCase}) : yield call(create${3:PascalCase}Api, action.${2:camelCase});",
      "    if (response) {",
      "      yield put(save${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(save${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* delete${3:PascalCase}Saga() {",
      "  yield takeLatest(DELETE_${1:UPPERCASE}, performDelete${3:PascalCase}Action);",
      "}",
      "function* performDelete${3:PascalCase}Action(action) {",
      "  try {",
      "    const { data, errors} = yield call(delete${3:PascalCase}Api, action.${2:camelCase}Id);",
      "    if (response) {",
      "      yield put(delete${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(delete${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "",
      "export default function* defaultSaga() {",
      "  return yield all([fetch${3:PascalCase}sSaga(), fetch${3:PascalCase}Saga(), save${3:PascalCase}Saga(), delete${3:PascalCase}Saga()]);",
      "}",
      ""
    ],
    "description": "Saga CRUD"
  },
  "Saga": {
    "prefix": "mc_saga",
    "body": [
      "export function* ${3:PascalCase}sSaga() {",
      "  yield takeLatest(${1:UPPERCASE}S, perform${3:PascalCase}sAction);",
      "}",
      "",
      "function* perform${3:PascalCase}sAction(action) {",
      "  try {",
      "    const { data, errors} = yield call(${3:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(${3:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(${3:PascalCase}sFailure(e));",
      "  }",
      "}"
    ],
    "description": "Saga"
  },
	"Component": {
	  "prefix": "mc_comp",
	  "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { makeStyles } from '@material-ui/styles';",
      "import styles from './${1:Name}.styles';",
      "const useStyles = makeStyles(styles);",
      "",
      "const ${1:Name} = ({ ${3:prop} }) => {",
      "  const classes = useStyles();",
      "  return <span className={classes.${2:camelCase}}>{${3:prop}}</span>;",
      "};",
      "${1:Name}.defaultProps = {};",
      "${1:Name}.propTypes = {",
      "  ${3:prop}: PropTypes.string,",
      "};",
      "",
      "export default ${1:Name};",
      ""
    ],
	  "description": "Generates Component"
	},
	"Container": {
    "prefix": "mc_container",
    "body": [
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { compose } from 'redux';",
      "",
      "// Actions",
      "import { fetch${1:PascalCase} } from '../actions/${2:lowercase}';",
      "",
      "// Selectors",
      "import { select${1:PascalCase} } from '../selectors/${2:lowercase}';",
      "",
      "// Component",
      "import ${1:PascalCase} from '../components/${1:PascalCase}';",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  ${2:lowercase}s: select${1:PascalCase}(),",
      "});",
      "",
      "function mapDispatchToProps(dispatch) {",
      "  return {",
      "    fetch${1:PascalCase}: options => dispatch(fetch${1:PascalCase}(options)),",
      "  };",
      "}",
      "",
      "const withConnect = connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps,",
      ");",
      "",
      "export default compose(withConnect)(${1:PascalCase});",
      ""
    ],
    "description": "Container"
  },
	"API CRUD": {
    "prefix": "mc_api_crud",
    "body": [
      "import { COOKIE_NAME } from '../../config/constants';",
      "import { buildUrl, getCookie, formatFilterAndSortOptions } from '../utils';",
      "const PATH = '/${2:camelCase}s';",
      "",
      "export const fetch${1:PascalCase}s = async (options = {}) => {",
      "  const url = `${buildUrl(PATH)}${formatFilterAndSortOptions(options)}`;",
      "  const response = await fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "    }),",
      "    mode: 'cors',",
      "  });",
      "  if (response.status === 200) {",
      "    return response.json();",
      "  }",
      "  const e = new Error();",
      "  e.code = response.status;",
      "  throw e;",
      "};",
      "",
      "export const fetch${1:PascalCase} = async ${2:camelCase}Id => {",
      "  const url = `${buildUrl(PATH)}/${${2:camelCase}Id}`;",
      "  const response = await fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      // Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "  });",
      "  if (response.status === 200) {",
      "    return response.json();",
      "  }",
      "  const e = new Error();",
      "  e.code = 401;",
      "  throw e;",
      "};",
      "export const save${1:PascalCase} = async ${2:camelCase} => {",
      "  const url = `${buildUrl(PATH)}`;",
      "  const response = await fetch(url, {",
      "    method: ${2:camelCase}.${2:camelCase}Id ? 'PUT' : 'POST',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    body: JSON.stringify(${2:camelCase}),",
      "  });",
      "  if (response.status === 200) {",
      "    return response.json();",
      "  }",
      "  const e = new Error();",
      "  e.code = 401;",
      "  throw e;",
      "};",
      "export const delete${1:PascalCase} = async ${2:camelCase}Id => {",
      "  const url = `${buildUrl(PATH)}/${${2:camelCase}Id}`;",
      "  const response = await fetch(url, {",
      "    method: 'DELETE',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "  });",
      "",
      "  if (response.status === 200) {",
      "    return response.json();",
      "  }",
      "  const e = new Error();",
      "  e.code = 401;",
      "  throw e;",
      "};",
      ""
    ],
    "description": "API CRUD"
  },
  "API Route": {
    "prefix": "mc_api_route",
    "body": [
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/api/${2:camelCase}s`);",
      "  return fetch(url, {",
      "    method: '${3:method}',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}"
    ],
    "description": "API Route"
  },
	"Selector": {
    "prefix": "mc_selector",
    "body": [
      "import { createSelector } from 'reselect';",
      "",
      "/**",
      " * Direct selector to the ${1:camelCase}s state domain",
      " */",
      "export const select${2:PascalCase}sDomain = state => state.${1:camelCase};",
      "",
      "/**",
      " * Sub Domain Selectors",
      " */",
      "export const select${2:PascalCase}s =",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.${1:camelCase}sList,",
      "  );",
      "export const selectNew${2:PascalCase} =",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.new${2:PascalCase},",
      "  );",
      "export const selectDeleted${2:PascalCase} =",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.deleted${2:PascalCase},",
      "  );",
      "export const selectActive${2:PascalCase} =",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.active${2:PascalCase},",
      "  );",
      "",
      ""
    ],
    "description": "Selector"
  },
	"HOC": {
    "prefix": "mc_hoc",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { compose } from 'redux';",
      "",
      "import { fetch${1:PascalCase}s, fetch${1:PascalCase}, save${1:PascalCase}, delete${1:PascalCase} } from '../actions/${2:lowercase}';",
      "import { select${1:PascalCase}s, selectActive${1:PascalCase}, selectNew${1:PascalCase}, selectDeleted${1:PascalCase} } from '../selectors/${2:lowercase}';",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  ${2:lowercase}s: select${1:PascalCase}s,",
      "  ${2:lowercase}: selectActive${1:PascalCase},",
      "  new${1:PascalCase}: selectNew${1:PascalCase},",
      "  deleted${1:PascalCase}: selectDeleted${1:PascalCase},",
      "});",
      "",
      "const mapDispatchToProps = dispatch => ({",
      "  fetch${1:PascalCase}s: options => dispatch(fetch${1:PascalCase}s(options)),",
      "  fetch${1:PascalCase}: id => dispatch(fetch${1:PascalCase}(id)),",
      "  save${1:PascalCase}: ${2:lowercase} => dispatch(save${1:PascalCase}(${2:lowercase})),",
      "  delete${1:PascalCase}: id => dispatch(delete${1:PascalCase}(id)),",
      "});",
      "",
      "const ComponentWrapper = Component => props => <Component {...props} />;",
      "",
      "export default compose(",
      "  connect(",
      "    mapStateToProps,",
      "    mapDispatchToProps,",
      "  ),",
      "  ComponentWrapper,",
      ");"
    ],
    "description": "HOC"
  },
  "Component Fixture": {
    "prefix": "mc_fixture",
    "body": [
      "import React from 'react';",
      "import ${1:ComponentName} from './${1:ComponentName}';",
      "",
      "export default {",
      "  ${1:ComponentName}: (",
      "    <${1:ComponentName}",
      "      ",
      "    />",
      "  ),",
      "};",
      ""
    ],
    "description": "Component Fixture"
  },
  "Server API Endpoint": {
    "prefix": "mc_server_api",
    "body": [
      "app.get('/api/${2:version}/${1:lowercaseName}', (req, res) => {",
      "  return res.status(200).json({",
      "    offset: 0,",
      "    limit: 100,",
      "    sort: [],",
      "    searchTerm: null,",
      "    filter: [],",
      "    total: 29823,",
      "    results: ${1:lowercaseName}s,",
      "  });",
      "});",
      "app.get('/api/${2:version}/${1:lowercaseName}/:id', (req, res) => {",
      "  const ${1:lowercaseName} = ${1:lowercaseName}s.filter((s) => s.id === req.params.id);",
      "  if (${1:lowercaseName}) {",
      "    res.status(200).json(${1:lowercaseName});",
      "  } else {",
      "    res.sendStatus(404);",
      "  }",
      "});",
      "app.post('/api/${2:version}/${1:lowercaseName}', (req, res) => {",
      "  res.sendStatus(200);",
      "});",
      "app.put('/api/${2:version}/${1:lowercaseName}/:id', (req, res) => {",
      "  return res.sendStatus(204);",
      "});",
      "app.delete('/api/${2:version}/${1:lowercaseName}/:id', (req, res) => {",
      "  return res.sendStatus(202);",
      "});"
    ],
    "description": "Server API Endpoint"
  },
  "Component Test": {
    "prefix": "mc_component_test",
    "body": [
      "import React from 'react';",
      "import { shallow } from 'enzyme';",
      "import ${1:ComponentName} from './${1:ComponentName}';",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  it('Renders component', () => {",
      "    const component = shallow(<${1:ComponentName} />);",
      "    expect(false).toBeTruthy(); // Write the test",
      "  });",
      "});",
      ""
    ],
    "description": "Component Test"
  },
  "Reducer": {
    "prefix": "mc_reducer",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE}S_SUCCESS,",
      "  FETCH_${1:UPPERCASE}S_FAILURE,",
      "  RESET_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "  SAVE_${1:UPPERCASE},",
      "  SAVE_${1:UPPERCASE}_SUCCESS,",
      "  SAVE_${1:UPPERCASE}_FAILURE,",
      "  UPDATE_ACTIVE_${1:UPPERCASE},",
      "  RESET_ACTIVE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE}_SUCCESS,",
      "  DELETE_${1:UPPERCASE}_FAILURE,",
      "  RESET_DELETED_${1:UPPERCASE},",
      "} from '../constants/${3:camelCase}';",
      "import { RESET } from '../constants/auth';",
      "",
      "const initialState = {",
      "  ${3:camelCase}s: {",
      "    errors: [],",
      "    loading: false,",
      "    offset: 0,",
      "    limit: 25,",
      "    sort: [],",
      "    searchTerm: '',",
      "    filters: [],",
      "    total: 0,",
      "    results: [],",
      "  },",
      "  active${2:PascalCase}: {",
      "    ${3:camelCase}: {},",
      "    errors: [],",
      "    loading: false,",
      "  },",
      "  new${2:PascalCase}: {",
      "    ${3:camelCase}: null,",
      "    errors: [],",
      "    loading: false,",
      "  },",
      "  delete${2:PascalCase}: {",
      "    ${3:camelCase}: null,",
      "    errors: [],",
      "    loading: false,",
      "  },",
      "};",
      "export default (state = initialState, action) => {",
      "  switch (action.type) {",
      "    case FETCH_${1:UPPERCASE}S:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}s: {",
      "          ...state.${3:camelCase}s,",
      "          ...action.options,",
      "          loading: true,",
      "        },",
      "      };",
      "    case FETCH_${1:UPPERCASE}S_SUCCESS:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}s: {",
      "          results: action.response.results,",
      "          errors: [],",
      "          loading: false,",
      "          offset: action.response.offset,",
      "          limit: action.response.limit,",
      "          sort: action.response.sort,",
      "          searchTerm: action.response.searchTerm,",
      "          filters: action.response.filters,",
      "          total: action.response.total,",
      "        },",
      "      };",
      "    case FETCH_${1:UPPERCASE}S_FAILURE:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}s: {",
      "          ...initialState.${3:camelCase}s,",
      "          loading: false,",
      "          errors: action.errors,",
      "        },",
      "      };",
      "    case RESET_${1:UPPERCASE}S:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}s: initialState.${3:camelCase}s,",
      "      };",
      "    case FETCH_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: { ...initialState.active${2:PascalCase}, loading: true },",
      "      };",
      "    case FETCH_${1:UPPERCASE}_SUCCESS:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ${3:camelCase}: action.${3:camelCase},",
      "          errors: [],",
      "          loading: false,",
      "        },",
      "      };",
      "    case FETCH_${1:UPPERCASE}_FAILURE:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...initialState.active${2:PascalCase},",
      "          loading: false,",
      "          errors: action.errors,",
      "        },",
      "      };",
      "    case SAVE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...state.active${2:PascalCase},",
      "          loading: true,",
      "          errors: [],",
      "        },",
      "      };",
      "    case SAVE_${1:UPPERCASE}_SUCCESS:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ${3:camelCase}: action.${3:camelCase},",
      "          loading: false,",
      "          errors: [],",
      "        },",
      "      };",
      "    case SAVE_${1:UPPERCASE}_FAILURE:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...state.active${2:PascalCase},",
      "          loading: false,",
      "          errors: action.errors,",
      "        },",
      "      };",
      "    case UPDATE_ACTIVE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...state.active${2:PascalCase},",
      "          ${3:camelCase}: { ...state.active${2:PascalCase}.${3:camelCase}, ...action.${3:camelCase} },",
      "        },",
      "      };",
      "    case RESET_ACTIVE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: initialState.active${2:PascalCase},",
      "      };",
      "    case DELETE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ${3:camelCase}: action.${3:camelCase},",
      "          loading: true,",
      "        },",
      "      };",
      "    case DELETE_${1:UPPERCASE}_SUCCESS:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ...state.delete${2:PascalCase},",
      "          loading: false,",
      "        },",
      "      };",
      "    case DELETE_${1:UPPERCASE}_FAILURE:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ...initialState.delete${2:PascalCase},",
      "          errors: action.errors,",
      "        },",
      "      };",
      "    case RESET_DELETED_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ...initialState.delete${2:PascalCase},",
      "        },",
      "      };",
      "    case RESET:",
      "      return initialState;",
      "    default:",
      "      return state;",
      "  }",
      "};",
      ""
    ],
    "description": "Reducer"
  },
  "Storybook Story": {
    "prefix": "mc_story",
    "body": [
      "import React from 'react';",
      "import ${1:Component} from './${1:Component}';",
      "",
      "export default {",
      "  component: ${1:Component},",
      "  title: '${1:Component}',",
      "};",
      "",
      "export const Default = () => <${1:Component} />;",
      ""
    ],
    "description": "Storybook Story"
  },
  "Style": {
    "prefix": "mc_styles",
    "body": [
      "export default theme => ({",
      "  ${1:camelCase}: {},",
      "});",
      ""
    ],
    "description": "Style"
  },
  "Text Field": {
    "prefix": "mc_text_field",
    "body": [
      "<TextField id='${1:camelCase}' name='${1:camelCase}' label='${2:String}' value={${3:model}.${1:camelCase}} onChange={handleChange('${1:camelCase}')} />",
    ],
    "description": "Text Field"
  },
  "Component List": {
    "prefix": "mc_component_list",
    "body": [
      "import React, { useEffect } from 'react';",
      "import PropTypes from 'prop-types';",
      "import Grid from '@material-ui/core/Grid';",
      "import DataGrid from 'mc-datagrid';",
      "",
      "const ${1:PascalCase}s = ({ ${2:camelCase}s, fetch${1:PascalCase}s, delete${1:PascalCase}, history }) => {",
      "  const handleAddEdit = id => {",
      "    history.push(`/${2:camelCase}s/${id || 'new'}`);",
      "  };",
      "",
      "  const handleFilter = options => fetch${1:PascalCase}s(options);",
      "",
      "  const handleDelete = id => delete${1:PascalCase}(id);",
      "",
      "  useEffect(() => {",
      "    fetch${1:PascalCase}s();",
      "  }, []);",
      "",
      "  return (",
      "    <Grid container>",
      "      <Grid item xs={12}>",
      "        <DataGrid",
      "          {...${2:camelCase}s}",
      "          columns={[",
      "            {",
      "              label: 'Stock Code Id',",
      "              field: '${2:camelCase}Id',",
      "              type: 'string',",
      "              flex: 1,",
      "            },",
      "            {",
      "              label: 'Name',",
      "              field: '${2:camelCase}Name',",
      "              type: 'string',",
      "              flex: 1,",
      "            },",
      "            {",
      "              label: 'Description',",
      "              field: '${2:camelCase}Description',",
      "              type: 'string',",
      "              flex: 1,",
      "            },",
      "          ]}",
      "          showEdit",
      "          showDelete",
      "          showFilterRow={false}",
      "          enableCreate",
      "          idField=\"${2:camelCase}Id\"",
      "          data={${2:camelCase}s.results}",
      "          onAdd={() => handleAddEdit()}",
      "          onEdit={id => handleAddEdit(id)}",
      "          onDelete={id => handleDelete(id)}",
      "          onSearch={searchTerm => handleFilter({ searchTerm })}",
      "          onFilter={filter => handleFilter({ filter })}",
      "          onChangePage={val => handleFilter(val)}",
      "          onChangeLimit={val => handleFilter(val)}",
      "          onSort={val => handleFilter({ sort: [val] })}",
      "        />",
      "      </Grid>",
      "    </Grid>",
      "  );",
      "};",
      "",
      "${1:PascalCase}s.propTypes = {",
      "  ${2:camelCase}s: PropTypes.object,",
      "  fetch${1:PascalCase}s: PropTypes.func,",
      "  delete${1:PascalCase}: PropTypes.func,",
      "  history: PropTypes.object,",
      "};",
      "export default ${1:PascalCase}s;",
      ""
    ],
    "description": "Component List"
  },
  "Component Model Form": {
    "prefix": "mc_component_model_form",
    "body": [
      "import React, { useEffect } from 'react';",
      "import PropTypes from 'prop-types';",
      "import Grid from '@material-ui/core/Grid';",
      "import { Loading, TextField, Button, Typography } from 'mc-ui';",
      "import Select from '../../Select';",
      "",
      "const ${1:PascalCase}Form = ({",
      "  ${2:camelCase}Id,",
      "  ${2:camelCase}: { ${2:camelCase}, loading, errors },",
      "  fetch${1:PascalCase},",
      "  update${1:PascalCase},",
      "  save${1:PascalCase},",
      "  onClose,",
      "}) => {",
      "  const handleChange = field => value => update${1:PascalCase}({ [field]: value });",
      "",
      "  useEffect(() => {",
      "    if (${2:camelCase}Id) {",
      "      fetch${1:PascalCase}(id);",
      "    }",
      "  }, []);",
      "",
      "  if (loading) {",
      "    return <Loading />;",
      "  }",
      "  return (",
      "    <Grid container spacing={2}>",
      "      <Grid item xs={12}>",
      "        <Typography variant=\"h2\">",
      "          {${2:camelCase}.${2:camelCase}Id ? 'Edit' : 'Add'} Stock Code {${2:camelCase}.${2:camelCase}Id}",
      "        </Typography>",
      "      </Grid>",
      "      <Grid item xs={12}>",
      "        <Button",
      "          type=\"primary\"",
      "          color=\"action\"",
      "          onClick={() => {",
      "            save${1:PascalCase}();",
      "            onClose();",
      "          }}",
      "        >",
      "          Save",
      "        </Button>",
      "      </Grid>",
      "    </Grid>",
      "  );",
      "};",
      "${1:PascalCase}Form.defaultProps = {};",
      "${1:PascalCase}Form.propTypes = {",
      "  prop: PropTypes.string,",
      "};",
      "",
      "export default ${1:PascalCase}Form;",
      ""
    ],
    "description": "Component Model Form"
  },
  "Select Input": {
    "prefix": "mc_select",
    "body": [
      "<Select",
      "  id=\"${1:name}\"",
      "  name=\"${1:name}\"",
      "  label=\"${2:label}\"",
      "  optionLabelKey=\"${3:optionLabelKey}\"",
      "  optionValueKey=\"${4:optionsValueKey}\"",
      "  options={${5:options}}",
      "  value={${6:value}}",
      "  onChange={handleChange('${1:name}')}",
      "/>"
    ],
    "description": "Select Input"
  },
  "MUI Grid": {
    "prefix": "mui_grid",
    "body": [
      "<Grid item xs={${1:size}}>${2:inside}</Grid>"
    ],
    "description": "MUI Grid"
  },
  "Action Test": {
    "prefix": "mc_action_test",
    "body": [
      "import expect from 'expect';",
      "import {",
      "  fetch${1:PascalCase},",
      "  fetch${1:PascalCase}Success,",
      "  fetch${1:PascalCase}Failure,",
      "  fetch${1:PascalCase}s,",
      "  fetch${1:PascalCase}sSuccess,",
      "  fetch${1:PascalCase}sFailure,",
      "  save${1:PascalCase},",
      "  save${1:PascalCase}Failure,",
      "  save${1:PascalCase}Success,",
      "  updateActive${1:PascalCase},",
      "  resetActive${1:PascalCase},",
      "  delete${1:PascalCase},",
      "  delete${1:PascalCase}Success,",
      "  delete${1:PascalCase}Failure,",
      "} from './${2:camelCase}';",
      "import {",
      "  FETCH_${3:UPPERCASE},",
      "  FETCH_${3:UPPERCASE}_SUCCESS,",
      "  FETCH_${3:UPPERCASE}_FAILURE,",
      "  FETCH_${3:UPPERCASE}S,",
      "  FETCH_${3:UPPERCASE}S_SUCCESS,",
      "  FETCH_${3:UPPERCASE}S_FAILURE,",
      "  SAVE_${3:UPPERCASE},",
      "  SAVE_${3:UPPERCASE}_SUCCESS,",
      "  SAVE_${3:UPPERCASE}_FAILURE,",
      "  UPDATE_ACTIVE_${3:UPPERCASE},",
      "  RESET_ACTIVE_${3:UPPERCASE},",
      "  DELETE_${3:UPPERCASE},",
      "  DELETE_${3:UPPERCASE}_SUCCESS,",
      "  DELETE_${3:UPPERCASE}_FAILURE,",
      "} from '../constants/${2:camelCase}';",
      "",
      "describe('appActionCreators', () => {",
      "  it('should return a fetch${1:PascalCase} action', () => {",
      "    expect(fetch${1:PascalCase}('123')).toEqual({",
      "      type: FETCH_${3:UPPERCASE},",
      "      ${2:camelCase}Id: '123',",
      "    });",
      "  });",
      "  it('should return a loadAppSuccessAction with an app object', () => {",
      "    expect(fetch${1:PascalCase}Success({})).toEqual({",
      "      type: FETCH_${3:UPPERCASE}_SUCCESS,",
      "      ${2:camelCase}: {},",
      "    });",
      "  });",
      "  it('should return a loadAppSuccessAction with an app object', () => {",
      "    expect(fetch${1:PascalCase}Failure(new Error('Something went wrong'))).toEqual({",
      "      type: FETCH_${3:UPPERCASE}_FAILURE,",
      "      errors: [new Error('Something went wrong')],",
      "    });",
      "  });",
      "  it('should return a fetch${1:PascalCase}s action', () => {",
      "    expect(fetch${1:PascalCase}s({})).toEqual({",
      "      type: FETCH_${3:UPPERCASE}S,",
      "      options: {},",
      "    });",
      "  });",
      "  it('should return a fetch${1:PascalCase}sSuccess action with response object', () => {",
      "    expect(fetch${1:PascalCase}sSuccess({})).toEqual({",
      "      type: FETCH_${3:UPPERCASE}S_SUCCESS,",
      "      response: {},",
      "    });",
      "  });",
      "  it('should return a fetch${1:PascalCase}Failure action with errors', () => {",
      "    expect(fetch${1:PascalCase}sFailure(new Error('Something went wrong'))).toEqual({",
      "      type: FETCH_${3:UPPERCASE}S_FAILURE,",
      "      errors: [new Error('Something went wrong')],",
      "    });",
      "  });",
      "  it('should return a save${1:PascalCase}s action', () => {",
      "    expect(save${1:PascalCase}({})).toEqual({",
      "      type: SAVE_${3:UPPERCASE},",
      "      ${2:camelCase}: {},",
      "    });",
      "  });",
      "  it('should return a save${1:PascalCase}sSuccess action with response object', () => {",
      "    expect(save${1:PascalCase}Success({})).toEqual({",
      "      type: SAVE_${3:UPPERCASE}_SUCCESS,",
      "      ${2:camelCase}: {},",
      "    });",
      "  });",
      "  it('should return a save${1:PascalCase}Failure action with errors', () => {",
      "    expect(save${1:PascalCase}Failure(new Error('Something went wrong'))).toEqual({",
      "      type: SAVE_${3:UPPERCASE}_FAILURE,",
      "      errors: [new Error('Something went wrong')],",
      "    });",
      "  });",
      "  it('should return a updateAtive${1:PascalCase} action with an object', () => {",
      "    expect(updateActive${1:PascalCase}({})).toEqual({",
      "      type: UPDATE_ACTIVE_${3:UPPERCASE},",
      "      ${2:camelCase}: {},",
      "    });",
      "  });",
      "  it('should return a updateAtive${1:PascalCase} action with an object', () => {",
      "    expect(resetActive${1:PascalCase}()).toEqual({",
      "      type: RESET_ACTIVE_${3:UPPERCASE},",
      "    });",
      "  });",
      "  it('should return a delete${1:PascalCase} action', () => {",
      "    expect(delete${1:PascalCase}(123)).toEqual({",
      "      type: DELETE_${3:UPPERCASE},",
      "      ${2:camelCase}Id: 123,",
      "    });",
      "  });",
      "  it('should return a delete${1:PascalCase}Success action with response object', () => {",
      "    expect(delete${1:PascalCase}Success()).toEqual({",
      "      type: DELETE_${3:UPPERCASE}_SUCCESS,",
      "    });",
      "  });",
      "  it('should return a delete${1:PascalCase}Failure action with errors', () => {",
      "    expect(delete${1:PascalCase}Failure(new Error('Something went wrong'))).toEqual({",
      "      type: DELETE_${3:UPPERCASE}_FAILURE,",
      "      errors: [new Error('Something went wrong')],",
      "    });",
      "  });",
      "});",
      ""
    ],
    "description": "Action Test"
  },
  "Component Index": {
    "prefix": "mc_component_index",
    "body": [
      "import React from 'react';",
      "import { useSelector, useDispatch } from 'react-redux';",
      "",
      "// Selectors",
      "import { selectAuth } from '../../selectors/auth';",
      "import { select${1:PascalCase}s, selectActive${1:PascalCase} } from '../../selectors/${2:camelCase}';",
      "",
      "// Actions",
      "import { fetch${1:PascalCase}s, fetch${1:PascalCase}, save${1:PascalCase} ,delete${1:PascalCase} } from '../../actions/${2:camelCase}';",
      "",
      "// Component",
      "import ${3:ComponentName} from './${3:ComponentName}';",
      "",
      "export default (props) => {",
      "  const dispatch = useDispatch();",
      "  return React.createElement(${3:ComponentName}, {",
      "    ...props,",
      "    auth: useSelector(selectAuth),",
      "    ${2:camelCase}: useSelector(selectActive${1:PascalCase}),",
      "    ${2:camelCase}s: useSelector(select${1:PascalCase}s),",
      "    save${1:PascalCase}: ${2:camelCase} => dispatch(save${1:PascalCase}(${2:camelCase})),",
      "    fetch${1:PascalCase}: id => dispatch(fetch${1:PascalCase}(id)),",
      "    fetch${1:PascalCase}s: () => dispatch(fetch${1:PascalCase}s()),",
      "    delete${1:PascalCase}: id => dispatch(delete${1:PascalCase}(id)),",
      "  });",
      "};",
      ""
    ],
    "description": "Component Index"
  },
  "Component Page": {
    "prefix": "mc_component_page",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import Grid from '@material-ui/core/Grid';",
      "import { Typography } from 'mc-ui';",
      "import { makeStyles } from '@material-ui/styles';",
      "import ${1:PascalCase}Form from '../${1:PascalCase}Form';",
      "import styles from './${1:PascalCase}Page.styles';",
      "const useStyles = makeStyles(styles);",
      "",
      "const ${1:PascalCase}Page = ({ prop }) => {",
      "  const classes = useStyles();",
      "  return (",
      "    <Grid container className={classes.${2:camelCase}Page}>",
      "      <Grid item xs={12}>",
      "        <Typography variant=\"h2\">${1:PascalCase} {${2:camelCase} && ${2:camelCase}.${2:camelCase}Id ? ${2:camelCase}.${2:camelCase}Id : null}</Typography>",
      "      </Grid>",
      "      <Grid item xs={12}>",
      "        <${1:PascalCase}Form />",
      "      </Grid>",
      "    </Grid>",
      "  );",
      "};",
      "${1:PascalCase}Page.defaultProps = {};",
      "${1:PascalCase}Page.propTypes = {",
      "  prop: PropTypes.string,",
      "};",
      "",
      "export default ${1:PascalCase}Page;",
      ""
    ],
    "description": "Component Page"
  }
}
